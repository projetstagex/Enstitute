// <auto-generated />
using System;
using Enstitute;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Enstitute.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20200315115158_InitialDB")]
    partial class InitialDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1");

            modelBuilder.Entity("Enstitute.Absence", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("SessionID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("SessionID");

                    b.HasIndex("StudentID");

                    b.ToTable("Absence");
                });

            modelBuilder.Entity("Enstitute.ActionGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GroupEditedID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecretaryID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("GroupEditedID");

                    b.HasIndex("SecretaryID");

                    b.ToTable("ActionGroup");
                });

            modelBuilder.Entity("Enstitute.ActionStudent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SecretaryID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StudentEditID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentEditedid")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("SecretaryID");

                    b.HasIndex("StudentEditedid");

                    b.ToTable("ActionStudent");
                });

            modelBuilder.Entity("Enstitute.Address", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AppartementAdress")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("StreetAdress")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Enstitute.Context", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(15);

                    b.Property<int>("PrecisionID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("PrecisionID");

                    b.ToTable("Context");
                });

            modelBuilder.Entity("Enstitute.Day", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(15);

                    b.HasKey("ID");

                    b.ToTable("Day");
                });

            modelBuilder.Entity("Enstitute.Delay", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SessionID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("SessionID");

                    b.HasIndex("StudentID");

                    b.ToTable("Delay");
                });

            modelBuilder.Entity("Enstitute.Departement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Departement");
                });

            modelBuilder.Entity("Enstitute.Formation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DepartementID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalYears")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("DepartementID");

                    b.ToTable("Formation");
                });

            modelBuilder.Entity("Enstitute.Gender", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Code")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("Enstitute.Grade", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("Enstitute.Group", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ScholarYearID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SectorID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ScholarYearID");

                    b.HasIndex("SectorID");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Enstitute.GroupEdited", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<int>("GroupID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("GroupID");

                    b.ToTable("GroupEdit");
                });

            modelBuilder.Entity("Enstitute.Module", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Approved")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Multiplier")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("Module");
                });

            modelBuilder.Entity("Enstitute.ModuleAffectation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FormerID")
                        .HasColumnType("TEXT");

                    b.Property<int>("GroupID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ModuleID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("FormerID");

                    b.HasIndex("GroupID");

                    b.HasIndex("ModuleID");

                    b.ToTable("ModuleAffectation");
                });

            modelBuilder.Entity("Enstitute.Precision", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(15);

                    b.Property<int>("ModuleID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ModuleID");

                    b.ToTable("Precision");
                });

            modelBuilder.Entity("Enstitute.Schedule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FormerID")
                        .HasColumnType("TEXT");

                    b.Property<int>("ScholarYearID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("FormerID");

                    b.HasIndex("ScholarYearID");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Enstitute.ScholarYear", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("From")
                        .HasColumnType("INTEGER");

                    b.Property<int>("To")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("ScholarYear");
                });

            modelBuilder.Entity("Enstitute.Sector", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FormationID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GradeID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("FormationID");

                    b.HasIndex("GradeID");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("Enstitute.Session", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DayID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FromHour")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FromMinute")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GroupID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ScheduleID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimePart")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToHour")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToMinute")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("is_catching")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("DayID");

                    b.HasIndex("GroupID");

                    b.HasIndex("ScheduleID");

                    b.ToTable("Session");
                });

            modelBuilder.Entity("Enstitute.SessionContext", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContextID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("SessionID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ContextID");

                    b.HasIndex("SessionID");

                    b.ToTable("SessionContext");
                });

            modelBuilder.Entity("Enstitute.StudentEdited", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("email")
                        .HasColumnType("TEXT");

                    b.Property<string>("firstName")
                        .HasColumnType("TEXT");

                    b.Property<int>("groupID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("lastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("nationality")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("studentID")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("groupID");

                    b.HasIndex("studentID");

                    b.ToTable("StudentEdit");
                });

            modelBuilder.Entity("Enstitute.User", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("TEXT");

                    b.Property<int>("AddressID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GenderID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NIC")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(15);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("is_actif")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("is_director")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("is_former")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("is_secretary")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("is_staff")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("AddressID");

                    b.HasIndex("GenderID");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("Enstitute.UserSession", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("TEXT")
                        .HasMaxLength(15);

                    b.Property<bool>("Deleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LoginDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserID")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("UserSession");
                });

            modelBuilder.Entity("Enstitute.Director", b =>
                {
                    b.HasBaseType("Enstitute.User");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(15);

                    b.HasDiscriminator().HasValue("Director");
                });

            modelBuilder.Entity("Enstitute.Former", b =>
                {
                    b.HasBaseType("Enstitute.User");

                    b.Property<DateTime>("HireDate")
                        .HasColumnName("Former_HireDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnName("Former_RegistrationNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.HasDiscriminator().HasValue("Former");
                });

            modelBuilder.Entity("Enstitute.Secretary", b =>
                {
                    b.HasBaseType("Enstitute.User");

                    b.Property<DateTime>("HireDate")
                        .HasColumnName("Secretary_HireDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnName("Secretary_RegistrationNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.HasDiscriminator().HasValue("Secretary");
                });

            modelBuilder.Entity("Enstitute.Student", b =>
                {
                    b.HasBaseType("Enstitute.User");

                    b.Property<int>("GroupID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("InscriptionNumber")
                        .HasColumnType("TEXT")
                        .HasMaxLength(30);

                    b.Property<bool>("Is_training")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasIndex("GroupID");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("Enstitute.Absence", b =>
                {
                    b.HasOne("Enstitute.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Enstitute.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID");
                });

            modelBuilder.Entity("Enstitute.ActionGroup", b =>
                {
                    b.HasOne("Enstitute.GroupEdited", "GroupEdited")
                        .WithMany()
                        .HasForeignKey("GroupEditedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Enstitute.Secretary", "Secretary")
                        .WithMany()
                        .HasForeignKey("SecretaryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Enstitute.ActionStudent", b =>
                {
                    b.HasOne("Enstitute.Secretary", "Secretary")
                        .WithMany()
                        .HasForeignKey("SecretaryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Enstitute.StudentEdited", "StudentEdited")
                        .WithMany()
                        .HasForeignKey("StudentEditedid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Enstitute.Context", b =>
                {
                    b.HasOne("Enstitute.Precision", "Precision")
                        .WithMany()
                        .HasForeignKey("PrecisionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Enstitute.Delay", b =>
                {
                    b.HasOne("Enstitute.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Enstitute.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID");
                });

            modelBuilder.Entity("Enstitute.Formation", b =>
                {
                    b.HasOne("Enstitute.Departement", "Departement")
                        .WithMany()
                        .HasForeignKey("DepartementID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Enstitute.Group", b =>
                {
                    b.HasOne("Enstitute.ScholarYear", "ScholarYear")
                        .WithMany()
                        .HasForeignKey("ScholarYearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Enstitute.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Enstitute.GroupEdited", b =>
                {
                    b.HasOne("Enstitute.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Enstitute.ModuleAffectation", b =>
                {
                    b.HasOne("Enstitute.Former", "Former")
                        .WithMany()
                        .HasForeignKey("FormerID");

                    b.HasOne("Enstitute.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Enstitute.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Enstitute.Precision", b =>
                {
                    b.HasOne("Enstitute.Module", "Module")
                        .WithMany()
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Enstitute.Schedule", b =>
                {
                    b.HasOne("Enstitute.Former", "Former")
                        .WithMany()
                        .HasForeignKey("FormerID");

                    b.HasOne("Enstitute.ScholarYear", "ScholarYear")
                        .WithMany()
                        .HasForeignKey("ScholarYearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Enstitute.Sector", b =>
                {
                    b.HasOne("Enstitute.Formation", "Formation")
                        .WithMany()
                        .HasForeignKey("FormationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Enstitute.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Enstitute.Session", b =>
                {
                    b.HasOne("Enstitute.Day", "Day")
                        .WithMany()
                        .HasForeignKey("DayID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Enstitute.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Enstitute.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Enstitute.SessionContext", b =>
                {
                    b.HasOne("Enstitute.Context", "Context")
                        .WithMany()
                        .HasForeignKey("ContextID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Enstitute.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Enstitute.StudentEdited", b =>
                {
                    b.HasOne("Enstitute.Group", "group")
                        .WithMany()
                        .HasForeignKey("groupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Enstitute.Student", "student")
                        .WithMany()
                        .HasForeignKey("studentID");
                });

            modelBuilder.Entity("Enstitute.User", b =>
                {
                    b.HasOne("Enstitute.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Enstitute.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Enstitute.UserSession", b =>
                {
                    b.HasOne("Enstitute.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Enstitute.Student", b =>
                {
                    b.HasOne("Enstitute.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
